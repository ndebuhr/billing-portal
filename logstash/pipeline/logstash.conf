input {
  syslog {
    port => 1514
  }
}

filter {
  # caddy http access logs
  grok {
    match => { "message" => "%{HTTPD_COMBINEDLOG}" }
  }
  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => [ "timestamp", "@timestamp" ]
    }
    date {
      match => [ "timestamp8601", "ISO8601" ]
    }
    useragent {
      source => "agent"
    }
    geoip {
      source => "clientip"
      fields => [ "city_name", "continent_code", "country_code2", "country_code3", "country_name", "dma_code", "ip", "latitude", "location", "longitude", "postal_code", "region_code", "region_name", "timezone" ]
    }
    mutate {
      add_field => { "[@metadata][target_index]" => "logstash-caddy-access-%{+YYYY.MM.dd}" }
    }
  }
  mutate {
    remove_tag => [ "_grokparsefailure" ]
  }
  # haproxy http logs
  grok {
    match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request}/%{INT:time_queue}/%{INT:time_backend_connect}/%{INT:time_backend_response}/%{NOTSPACE:time_duration} %{INT:http_status_code} %{NOTSPACE:bytes_read} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?\"?" }
  }
  if "_grokparsefailure" not in [tags] {
    date {
      match => [ "timestamp8601", "ISO8601" ]
    }
    geoip {
      source => "client_ip"
      fields => [ "city_name", "continent_code", "country_code2", "country_code3", "country_name", "dma_code", "ip", "latitude", "location", "longitude", "postal_code", "region_code", "region_name", "timezone" ]
    }
    mutate {
      add_field => { "[@metadata][target_index]" => "logstash-haproxy-http-%{+YYYY.MM.dd}" }
    }
  }
  mutate {
    remove_tag => [ "_grokparsefailure" ]
  }
}

output {
  elasticsearch {
    hosts => ["http://es01:9200","http://es02:9200"]
    index => "%{[@metadata][target_index]}"
  }
}
